"""
Telegram –±–æ—Ç –¥–ª—è Settings AI Agent
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from config import Config
from yandex_gpt import YandexGPTClient
from models import AgentResponse, ResponseType

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class SettingsTelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Å–∏—Å—Ç–µ–º"""

    def __init__(self):
        try:
            self.gpt_client = YandexGPTClient()
            logger.info("YandexGPT –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YandexGPT –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            self.gpt_client = None

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_message = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Settings AI Agent!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Å–∏—Å—Ç–µ–º –∏ —Ä–µ—à–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/test - –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å YandexGPT

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–µ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ!
        """

        keyboard = [
            [InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="settings")],
            [InlineKeyboardButton("üêõ –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º", callback_data="troubleshooting")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="general")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

–Ø —É–º–µ—é –ø–æ–º–æ–≥–∞—Ç—å —Å:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
‚Ä¢ –†–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–µ—Ç–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–µ–ø–æ–ª–∞–¥–æ–∫
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ—à–∞–≥–æ–≤—ã–º —Ä–µ—à–µ–Ω–∏–µ–º.

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–∞ Windows 10"
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSH –Ω–∞ Ubuntu?"
‚Ä¢ "–ö–æ–º–ø—å—é—Ç–µ—Ä –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
‚Ä¢ "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
        """
        await update.message.reply_text(help_text)

    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test"""
        await update.message.reply_text("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å YandexGPT...")

        if self.gpt_client is None:
            response = AgentResponse.create_error(
                message="‚ùå YandexGPT –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                error_details="–ö–ª–∏–µ–Ω—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                suggestions=["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞"]
            )
        else:
            response = self.gpt_client.test_connection()

        await update.message.reply_text(response.to_json())

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text

        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

        try:
            if self.gpt_client is None:
                response = AgentResponse.create_error(
                    message="‚ùå YandexGPT –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    error_details="–ö–ª–∏–µ–Ω—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                    suggestions=["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞"]
                )
            else:
                response = self.gpt_client.generate_response(user_message)

            await update.message.reply_text(response.to_json())
            logger.info(f"Response type: {response.type}, Confidence: {response.confidence}")

        except Exception as e:
            logger.error(f"Error processing message: {str(e)}")
            response = AgentResponse.create_error(
                message="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                error_details=str(e)[:200],
                suggestions=["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å", "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"]
            )
            await update.message.reply_text(response.to_json())

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data == "settings":
            response = AgentResponse.create_info(
                message="üîß –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É",
                data={"categories": ["–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–°–µ—Ç–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]},
                actions=["–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å!"]
            )
            await query.edit_message_text(response.to_json())

        elif query.data == "troubleshooting":
            response = AgentResponse.create_info(
                message="üêõ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å",
                data={"problem_types": ["–û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ", "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é", "–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–ù–µ–ø–æ–ª–∞–¥–∫–∏ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º"]},
                actions=["–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ä–µ—à–µ–Ω–∏–µ!"]
            )
            await query.edit_message_text(response.to_json())

        elif query.data == "general":
            response = AgentResponse.create_info(
                message="‚ÑπÔ∏è –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ IT –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–∏—Å—Ç–µ–º",
                data={"question_types": ["–ö–∞–∫ —á—Ç–æ-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É", "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤", "–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"]},
                actions=["–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç!"]
            )
            await query.edit_message_text(response.to_json())

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("test", self.test_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(CallbackQueryHandler(self.handle_callback))

        logger.info("Starting Settings AI Telegram Bot...")
        application.run_polling()