"""
–ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Settings AI Agent
–í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ
"""

from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from enum import Enum
from datetime import datetime


class ResponseType(str, Enum):
    """–¢–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –∞–≥–µ–Ω—Ç–∞"""
    SUCCESS = "success"
    ERROR = "error"
    INFO = "info"
    WARNING = "warning"


class AgentResponse(BaseModel):
    """
    –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
    –í—Å–µ –æ—Ç–≤–µ—Ç—ã (—É—Å–ø–µ—Ö, –æ—à–∏–±–∫–∏) –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    type: ResponseType = Field(description="–¢–∏–ø –æ—Ç–≤–µ—Ç–∞")
    message: str = Field(description="–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    data: Optional[Dict[str, Any]] = Field(default=None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    actions: Optional[List[str]] = Field(default=None, description="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    confidence: Optional[float] = Field(default=None, ge=0.0, le=1.0, description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ (0-1)")
    timestamp: str = Field(default_factory=lambda: datetime.now().isoformat(), description="–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
    suggestions: Optional[List[str]] = Field(default=None, description="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é")
    error_details: Optional[str] = Field(default=None, description="–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–∞ ERROR)")

    def to_json(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å—Ç—Ä–æ–∫—É"""
        return self.model_dump_json(indent=2)

    def to_formatted_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        type_emojis = {
            ResponseType.SUCCESS: "‚úÖ",
            ResponseType.ERROR: "‚ùå",
            ResponseType.INFO: "‚ÑπÔ∏è",
            ResponseType.WARNING: "‚ö†Ô∏è"
        }

        emoji = type_emojis.get(self.type, "‚ÑπÔ∏è")
        result = f"{emoji} {self.message}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.data:
            if "category" in self.data:
                result += f"\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {self.data['category']}\n"

            if "steps" in self.data and self.data["steps"]:
                result += "\nüìã –ü–æ—à–∞–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n"
                for i, step in enumerate(self.data["steps"], 1):
                    result += f"{i}. {step}\n"

            if "solution" in self.data:
                result += f"\nüí° –†–µ—à–µ–Ω–∏–µ: {self.data['solution']}\n"

            if "additional_info" in self.data:
                result += f"\nüìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {self.data['additional_info']}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if self.actions:
            result += "\nüéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
            for action in self.actions:
                result += f"‚Ä¢ {action}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if self.suggestions:
            result += "\nüí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n"
            for suggestion in self.suggestions:
                result += f"‚Ä¢ {suggestion}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫)
        if self.type == ResponseType.ERROR and self.error_details:
            result += f"\nüîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {self.error_details}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if self.confidence is not None:
            confidence_emoji = "üü¢" if self.confidence > 0.8 else "üü°" if self.confidence > 0.5 else "üî¥"
            result += f"\n{confidence_emoji} –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.confidence:.0%}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è (timestamp)
        result += f"\nüïê –í—Ä–µ–º—è: {self.timestamp}\n"

        return result

    @classmethod
    def create_success(cls, message: str, data: Optional[Dict[str, Any]] = None, 
                      actions: Optional[List[str]] = None, confidence: float = 0.9) -> "AgentResponse":
        """–°–æ–∑–¥–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        return cls(
            type=ResponseType.SUCCESS,
            message=message,
            data=data,
            actions=actions,
            confidence=confidence
        )

    @classmethod
    def create_error(cls, message: str, error_details: Optional[str] = None,
                    suggestions: Optional[List[str]] = None) -> "AgentResponse":
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ"""
        return cls(
            type=ResponseType.ERROR,
            message=message,
            error_details=error_details,
            suggestions=suggestions,
            confidence=1.0
        )

    @classmethod
    def create_info(cls, message: str, data: Optional[Dict[str, Any]] = None,
                   actions: Optional[List[str]] = None) -> "AgentResponse":
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        return cls(
            type=ResponseType.INFO,
            message=message,
            data=data,
            actions=actions,
            confidence=0.8
        )

    @classmethod
    def create_warning(cls, message: str, data: Optional[Dict[str, Any]] = None,
                      actions: Optional[List[str]] = None) -> "AgentResponse":
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        return cls(
            type=ResponseType.WARNING,
            message=message,
            data=data,
            actions=actions,
            confidence=0.7
        )